openapi: 3.0.0
info:
  version: 1.0.0
  title: Airbnb
  description: Pembuatan API Airbnb
  contact:
    name: Official
    url: https://academy.alterra.id
    email: Academy@alterra.id
externalDocs:
  url: https://alta.id/immersive
  description: dokumentasi API alta immersive BE 13
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/TECHMIN7_1/AirbnbProject/1.0.0
  # - description: Real Immersive-Dashboard servers 
  #   url: http:// 34.87.101.252:80
    variables:
      environment:
        default: dev
        enum:
          - "dev"
          - "prod"
tags:
  - name: auth
    description: "authentication"
  - name: Users
    description: "Manajemen data User"
  - name: Komentars
    description: "Manajemen data Komentar"
  - name: Rooms
    description: "Manajemen data Room"
  - name: Gambar Rooms
    description: "Manajemen data Gambar Room"
  - name: Reservations
    description: "Manajemen data Reservation"

paths:
  /auth:
    post:
      tags: 
        - auth
      summary: Login to system
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              type: object
            example:
              email: "joko@mail.com"
              password: "qwerty123"
      responses:
        '200': 
          description: Success login.
          content:
            application/json:
              schema:
                type: object
              example:
                message: "success login"
                data: 
                    id: 1
                    full_name: "joko"
                    email: "joko@mail.com"
                    token: "odnfownfowrijgowrigworin"
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /users/register:
    post:
      tags: 
        - Users
      summary: Register to system
      security:
         - JWTAuth: []
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              type: object
            example:
              name: "joko"
              email: "joko@mail.com"
              password: "qwerty123"
              phone: "08994567893"
      responses:
        '200': 
          description: Success registrasi.
          content:
            application/json:
              schema:
                type: object
              example:
                message: "success registrasi"
                data: 
                    id: 1
                    name: "joko"
                    email: "joko@mail.com"
                    password: "qwerty123"
                    phone: "08994567893"
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /users/{users_id}:
    get:
      tags:
        - Users
      summary: get user by id
      description: melihat data user by id
      security:
        - JWTAuth: []
      parameters:
        - name: users_id
          description: "users id"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: list of user by id
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success get user by id"
                  data:
                    - id: 1
                      name: "agus"
                      email: "agus@mail.com"
                      role: "user" 
                      phone: "08994568493"
                      password: "qwety"
                   
        '404':
          $ref: '#/components/responses/404'
    put:
      tags:
        - Users
      summary: update users by id
      description: update data user by id
      security:
        - JWTAuth: []
      parameters:
        - name: users_id
          description: "users_id"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                name: "agus"
                email: "agus@mail.com"
                role: "user" 
                phone: "08994568493"
                password: "qwety"
      responses:
        '200':
          description: update user status
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success update user"
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - Users
      summary: delete specific users by id
      description: delete specific data user by id
      security:
        - JWTAuth: []
      parameters:
        - name: users_id
          description: "users id"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: delete user
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success delete user"
        '404':
          $ref: '#/components/responses/404'
  /users/{users_id}/upgrade:
    put:
      tags:
        - Users
      summary: update users by id to hosting
      description: update data user by id to hosting
      security:
        - JWTAuth: []
      parameters:
        - name: users_id
          description: "users_id"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                name: "agus"
                email: "agus@mail.com"
                role: "hosting" 
                phone: "08994568493"
                password: "qwety"
      responses:
        '200':
          description: update user status
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success update user"
        '404':
          $ref: '#/components/responses/404'
  /komentars:
    post:
      tags:
        - Komentars
      summary: add komentars
      description: Menambah data Komentar
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                vote_star: 5
                users_id: 1
                rooms_id: 1
                isi_komentar: "bagus nih"
      responses:
        '200':
          description: Add komentar berhasil.
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "Add komentar berhasil"
        '400':
          description: Add komentar gagal.
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "failed"
                  message: "Add komentar gagal. semua field wajib diisi"
        '500':
          $ref: '#/components/responses/500' 
  /rooms/{rooms_id}/komentars:
    get:
      tags:
        - Rooms
      summary: get by id rooms all Komentar
      description: Melihat seluruh data komentar dari room id
      security:
        - JWTAuth: []
      parameters:
        - name: rooms_id
          description: "rooms_id"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: A list of komentar
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success get komentar by id room"
                  data:
                    - komentars_id: 1
                      vote_star: 5
                      users:
                        {
                        users_id: 2,
                        name: "joko"
                        }
                      isi_komentar: "Mantul"
        '404':
          $ref: '#/components/responses/404'

  /rooms:
    post:
      tags:
        - Rooms
      summary: add Rooms
      description: Menambah data Room
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                name_room: "BE 13"
                price: 100000
                description: "rumah bagus"
                status: "available"
                users_id: 1, 
                longitude: 1937481.101394
                latitude: 037393.937349
      responses:
        '200':
          description: Add room berhasil.
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "Add room berhasil"
        '400':
          description: Add room gagal.
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "failed"
                  message: "Add room gagal. semua field wajib diisi"
        '500':
          $ref: '#/components/responses/500'
    get:
      tags:
        - Rooms
      summary: get all rooms
      description: Melihat seluruh data room
      security:
        - JWTAuth: []
      parameters:
        - name: limit
          description: "limit"
          required: false
          in: query
          schema:
            type: integer
            example: 5
        - name: offset
          description: "offset"
          required: false
          in: query
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: A list of all room
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success get all room"
                  data:
                    - rooms_id: 1
                      name_room: "Prima a13"
                      description: "rumah indah bak permadani"
                      price: 100000
                      status: "available"
                      longitude: 9237529348.923752934
                      latitude: 293452039520.029850239
                      gambar: "www.google.com"
                        
                    - rooms_id: 2
                      name_room: "Prima a14"
                      description: "rumah indah super bak permadani"
                      price: 123000
                      status: "available"
                      longitude: 92379348.923456752934
                      latitude: 2934545520.0297850239
                      gambar: "www.google.com"
                                    
        '404':
          $ref: '#/components/responses/404'
  /rooms/{rooms_id}:  
    get:
      tags:
        - Rooms
      summary: get room by id
      description: melihat data room by id
      security:
        - JWTAuth: []
      parameters:
        - name: rooms_id
          description: "rooms id"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: list of room by id
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success get rooms by id"
                  data:
                    - room_id: 1
                      name_room: "Prima a13"
                      description: "rumah indah bak permadani"
                      price: 100000
                      status: "available"
                      longitude: 9237529348.923752934
                      latitude: 293452039520.029850239
                      gambar: "www.google.com"

        '404':
          $ref: '#/components/responses/404'
    put:
      tags:
        - Rooms
      summary: update specific rooms by id
      description: update specific data room by id
      security:
        - JWTAuth: []
      parameters:
        - name: rooms_id
          description: "rooms id"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                name_room: "Prima a13"
                description: "rumah indah bak permadani"
                price: 100000
                status: "available"
                longitude: 9237529348.923752934
                latitude: 293452039520.029850239
      responses:
        '200':
          description: A list of room
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success update room"
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - Rooms
      summary: delete specific rooms by id
      description: delete specific data room by id
      security:
        - JWTAuth: []
      parameters:
        - name: rooms_id
          description: "rooms id"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: delete room
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success delete room"
        '404':
          $ref: '#/components/responses/404'

  /gambar rooms:
    post:
      tags:
        - Gambar Rooms
      summary: add gambar rooms
      description: Menambah data Gambar Room
      requestBody:
        required: true
        content:
          multipart/form-data: # Media type
            schema:
              type: object
              example:
                gambar: "google.com"
                rooms_id: 1
      responses:
        '200':
          description: Add gambar room berhasil.
          content:
            multipart/form-data: # Media type
              schema:
                type: object
                example:
                  status: "success"
                  message: "Add gambar room berhasil"
        '400':
          description: Add gambar room gagal.
          content:
            multipart/form-data: # Media type
              schema:
                type: object
                example:
                  status: "failed"
                  message: "Add gambar room gagal. semua field wajib diisi"
        '500':
          $ref: '#/components/responses/500'
    get:
      tags:
        - Gambar Rooms
      summary: get all gambar rooms
      description: Melihat seluruh data gambar room
      security:
        - JWTAuth: []
      parameters:
        - name: limit
          description: "limit"
          required: false
          in: query
          schema:
            type: integer
            example: 5
        - name: offset
          description: "offset"
          required: false
          in: query
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: A list of all gambar room
          content:
            multipart/form-data: # Media type
              schema:
                type: object
                example:
                  status: "success"
                  message: "success get all gambar room"
                  data:
                    - gambar rooms_id: 1
                      gambar: "google.com"
                    - gambar rooms_id: 2
                      gambar: "bing.com"          
        '404':
          $ref: '#/components/responses/404' 
  /gambar rooms/{gambar rooms_id}/rooms:
    get:
      tags:
        - Gambar Rooms
      summary: get gambar rooms by room_id
      description: melihat data gambar room by room_id
      security:
        - JWTAuth: []
      parameters:
        - name: gambar rooms_id
          description: "gambar rooms id"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: list of gambar room by room_id
          content:
            multipart/form-data: # Media type
              schema:
                type: object
                example:
                  status: "success"
                  message: "success get gambar room by room_id"
                  data:
                    - gambar_id: 1
                      gambar: "google.com"
        '404':
          $ref: '#/components/responses/404'
  /gambar rooms/{gambar rooms_id}:
    put:
      tags:
        - Gambar Rooms
      summary: update specific gambar room by id
      description: update specific data gambar room by id
      security:
        - JWTAuth: []
      parameters:
        - name: gambar rooms_id
          description: "gambar rooms id"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          multipart/form-data: # Media type
            schema:
              type: object
              example:
                gambar: "yahoo.com"
      responses:
        '200':
          description: A list of gambar room
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success update gambar room"
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - Gambar Rooms
      summary: delete specific gambar rooms by id
      description: delete specific data gambar room by id
      security:
        - JWTAuth: []
      parameters:
        - name: gambar rooms_id
          description: "gambar rooms_id"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: delete gambar room
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success delete room"
        '404':
          $ref: '#/components/responses/404'
  /reservations/check:
    post:
      tags:
        - Reservations
      summary: pengecekan Reservations
      description: Menambah data Reservation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                rooms_id: 1
                start_date: "30 11 2022"
                end_date: "15 12 2022"
      responses:
        '200':
          description: pengecekan room berhasil.
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "available"
        '400':
          description: pengecekan room gagal.
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "failed"
                  message: "Pengecekan room gagal. semua field wajib diisi"
        '500':
          $ref: '#/components/responses/500'
  /reservations:
    post:
      tags:
        - Reservations
      summary: add Reservation rooms
      description: Menambah data Reservation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                room_id: 1
                start_date: "30 11 2022"
                end_date: "15 12 2022"
                payment:
                  {
                  nama_bank: "bca",
                  metode: "visa",
                  nama_rek: "joni",
                  no_rek: "758565857575957",
                  no_cvv: 374,
                  expired_year: 2022,
                  expired_month : 2 
                  }
      responses:
        '200':
          description: Add Reservation berhasil.
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "Add Reservation berhasil"
        '400':
          description: Add Reservation room gagal.
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "failed"
                  message: "Add Reservation gagal. semua field wajib diisi"
        '500':
          $ref: '#/components/responses/500'
    get:
      tags:
        - Reservations
      summary: get all Reservations
      description: Melihat seluruh data Reservation
      security:
        - JWTAuth: []
      parameters:
        - name: limit
          description: "limit"
          required: false
          in: query
          schema:
            type: integer
            example: 5
        - name: offset
          description: "offset"
          required: false
          in: query
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: A list of all Reservation
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "success get all reservation"
                  data:
                  users_id: 1
                  room:
                  rooms_id: 1
                  start_date: "30 11 2022"
                  end_date: "15 12 2022"
                  price: 100000
                  total_price: 100000
                  status: "telah dibayar"
  /reservations/{reservations_id}/users:
    get:
      tags:
        - Reservations
      summary: get reservation by id user
      description: melihat data reservation by id user
      security:
        - JWTAuth: []
      parameters:
        - name: reservations_id
          description: "reservation id"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: list of reservation by id user
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success get reservation by id"
                  data 1:
                    rooms:
                      {
                      rooms_id: 1,
                      name_room: "prima A3"
                      }
                    start_date: "30 11 2022"
                    end_date: "15 12 2022"
                    price: 100000
                    total_price: 100000
                    status: "telah dibayar"    
                    data 2:
                      rooms:
                        {
                        rooms_id: 2,
                        name_room: "bidadri A4"
                        }
                      start_date: "30 11 2022"
                      end_date: "15 12 2022"
                      price: 100000
                      total_price: 100000
                      status: "telah dibayar"
        '404':
          $ref: '#/components/responses/404'
####################################
#...COMPONENTS...#
####################################
components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "use Token"

  schemas:
    Users:
      type: object
      properties:
        users_id:
          type: integer
          format: uint
        name:
          type: string
        email:
          type: string
        role:
          type: string
          enum:
            - user
            - hosting
        phone:
          type: string
        password:
          type: string
        
    Komentar:
      type: object
      properties:
        komentars_id:  
          type: integer
          format: uint
        vote_star:
          type: integer
          format: uint
        isi_komentar:
          type: string
        created_at:
          type: string
        update_at:
          type: string
    Rooms:
      type: object
      properties:
        rooms_id:
          type: integer
          format: uint
        name_room:
          type: string
        price:
          type: integer
          format: uint
        description:
          type: string
        status:
          type: string
          enum:
            - available
            - non available
        longitude:
          type: number
        latitude:
          type: number
    GambarRooms:
      type: object
      properties:
        gambar rooms_id:
          type: integer
          format: uint
        rooms_id:
          type: integer
          format: uint
        gambar:
          type: string
    Reservations:
      type: object
      properties:
        reservations_id:
          type: integer
          format: uint
        id_users:
          type: integer
          format: uint
        id_rooms:
          type: integer
          format: uint
        started_date:
          type: string
        end_date:
          type: string
        price:
          type: integer
          format: uint
        total_price:
          type: integer
          format: uint
        status:
          enum:
            - telah dibayar
            - belum dibayar
        payments_id:
          type: integer
          format: uint
    ResponseWithoutData:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
  responses:
    '404':
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/ResponseWithoutData'
          example:
            status: "failed"
            message: "data not found"


    '500':
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/ResponseWithoutData'
          example:
            status: "failed"
            message: "internal server error"